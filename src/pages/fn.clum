// カリー
// a, b を束縛
f = f 1, 2
// 残りの引数を入れた後実行
f 3 |> !

:pub
# Vec<T>

:pub
:for Vec<T>
# With xs: Vec<T>, x: T -> Vec<T>

:pub
:for Vec<T>
# RemoveAt xs: Vec<T>, index: u64 -> Vec<T>

:pub
:for Vec<T>
// 無名関数内の引数名を省略できないようにする
# Map<T, U> transform: (x: T -> U), xs: Vec<T> -> Vec<U>

:pub
:for Vec<T>
# New ...items: Vec<T> -> Vec<T>

:pub
# GetUser select: Select, id: UserId -> :any
  User
  UserNotFound
  TooManyResults
  GiveUp

:pub
:async
get-user: GetUser select, id ->
  'select * from users where id = {id}'
    |> select
    |> :await
    |> :match 
      :is Empty => UserNotFound id |> !
      :is One found => User:from found |> !
      :is Many results => TooManyResults:from results |> !
      :else cause => GiveUp:from cause |> !
    |> !

a: i32 = 0
a: i32:r = 0
a: i32:w = 0
a: i32:r:w = 0

# File

:pub
:for File
# Open path: PathLike, mode: Mode -> File

:for File
:when .linux
open path, mode ->
  // epoll使う

:for File
:when .windows
open path, mode ->
  // IOCP使う

:pub
# Add a: u32, b: u32 -> :any u32, OverFlow

:pub
:test 'limit', t ->
  limit: u32 = upper-limit<u32>!
  result = add limit, 10 |> !
  ? result
    :is OverFlow => t:ok!
    :else v => t:err v |> !
add: Add a, b ->
  sum = a + b
  ? sum
    :in 0..upper-limit<u32>! => sum
    :else => OverFlow:from '{a}, {b}'
